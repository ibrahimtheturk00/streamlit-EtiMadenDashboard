import random
import streamlit as st
import plotly.express as px
import pandas as pd
import numpy as np
import pycountry
import streamlit as st
import random
import json
from streamlit_timeline import timeline

st.set_page_config()
# Logo ve Ã¼st aÃ§Ä±klama
# Sidebar baÅŸlÄ±ÄŸÄ±
st.sidebar.image("C:\\Users\\turki\\OneDrive\\Desktop\\proje\\pages\\indir.jpeg", width=200)
st.sidebar.title("Bilgi & Linkler")

# --- 1. DÄ±ÅŸ Linkler ---
st.sidebar.subheader("DÄ±ÅŸ Linkler")
st.sidebar.markdown("""
- [Eti Maden Resmi Sitesi](https://www.etimaden.gov.tr)
- [Destek SayfasÄ±](mailto:destek@etimaden.gov.tr)
- [Ä°letiÅŸim](mailto:iletisim@etimaden.gov.tr)
""")

st.sidebar.markdown("---")

# --- 3. Bilgilendirici Notlar ---
st.sidebar.subheader("Bilgilendirici Notlar")
st.sidebar.markdown("""
- **Uygulama AmacÄ±:**  
Eti Maden Ä°ÅŸletmeleri bor Ã¼retimi ve ihracatÄ±na dair kapsamlÄ± analiz ve gÃ¶rselleÅŸtirme.

- **Veri KaynaÄŸÄ±:**  
Bu projede Ã¶rnek veriler kullanÄ±lmÄ±ÅŸtÄ±r, deÄŸerler ve bilgiler gerÃ§eÄŸi yansÄ±tmamaktadÄ±r.

- **Son GÃ¼ncelleme:**  
05 AÄŸustos 2025
""")
df_tesis = pd.read_csv(
    "C:\\Users\\turki\\OneDrive\\Desktop\\proje\\pages\\bor_uretim_ihracat_2000_2023.csv",
    encoding="ISO-8859-9"
)
df_tur = pd.read_csv(
    "C:\\Users\\turki\\OneDrive\\Desktop\\proje\\pages\\bor_verileri_2000_2020_ek_turev.csv",
    encoding="ISO-8859-9"
)
st.markdown(f"""
<style>
.section-header {{
    display: flex;
    align-items: center;
    margin-bottom: 30px;
}}

.section-header h14 {{
    font-size: 42px;
    font-weight: 1000;
    background: linear-gradient(90deg, #474747, #89898f, #cdcdd4);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    margin: 0;
    white-space: nowrap;
    letter-spacing: 1px;
    transition: transform 0.3s ease, letter-spacing 0.3s ease, text-shadow 0.3s ease;
    text-shadow: none;
}}

.section-header:hover h14 {{
    transform: scale(1.03);
    letter-spacing: 2px;
    text-shadow: 0 0 8px rgba(184, 184, 191, 0.6), 
                 0 0 16px rgba(184, 184, 191, 0.4);
}}

.section-header .line {{
    flex-grow: 1;
    height: 3px;
    background: linear-gradient(90deg, #9a9aa0, #b8b8bf, #d6d6dc);
    border-radius: 5px;
    margin-left: 20px;
}}
</style>

<div class="section-header">
    <h14>ETÄ°MADEN</h14>
    <div class="line"></div>
</div>
""", unsafe_allow_html=True)
st.markdown("""
<p style="margin-top:-15px; font-size: 18px; color: white;">Bu proje, Eti Maden'in bor madenciliÄŸi faaliyetlerine iliÅŸkin canlÄ± verileri, interaktif grafikler ve gÃ¶rselleÅŸtirmelerle birlikte sunar. Hedefimiz, ÅŸeffaflÄ±k, anlÄ±k izleme ve veriye dayalÄ± karar alma sÃ¼reÃ§lerini desteklemektir.

### Neden Ã–nemli?

TÃ¼rkiye, **dÃ¼nya bor rezervlerinin %73'Ã¼ne** sahiptir. Bu platform, Ã¼lkemizin bu stratejik kaynaÄŸÄ±nÄ± nasÄ±l yÃ¶nettiÄŸini ve dÃ¼nyaya nasÄ±l sunduÄŸunu ÅŸeffaf ÅŸekilde izlemek iÃ§in tasarlanmÄ±ÅŸtÄ±r.

*Veriler demo amaÃ§lÄ±dÄ±r ve canlÄ± sistem entegrasyonu iÃ§in yapÄ±landÄ±rÄ±labilir.*
</p>
""", unsafe_allow_html=True)
# CSS ile sekmeleri ortala
st.markdown("""
    <style>
    .stTabs [data-baseweb="tab-list"] {
        justify-content: center;
    }
    </style>
    """, unsafe_allow_html=True)

# Sekmeleri oluÅŸtur
tabs = st.tabs(["Bor TÃ¼rleri SektÃ¶r BazlÄ± Sorgulama", "DÃ¼nya Ä°hracat HaritasÄ±"])
with tabs[0]:
    st.markdown(f"""
    <style>
    .section-header {{
        display: flex;
        align-items: center;
        margin-bottom: 20px;
    }}
    .section-header h200 {{
        font-size: 32px;
        font-weight: 1000;
        background: linear-gradient(90deg, #474747, #89898f, #cdcdd4);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin: 0;
        white-space: nowrap;
        letter-spacing: 1px;
        transition: transform 0.3s ease, letter-spacing 0.3s ease, text-shadow 0.3s ease;
        text-shadow: none;
    }}
    .section-header:hover h200 {{
        transform: scale(1.03);
        letter-spacing: 2px;
        text-shadow: 0 0 8px rgba(184, 184, 191, 0.6),
                     0 0 16px rgba(184, 184, 191, 0.4);
    }}
    .section-header .line {{
        flex-grow: 1;
        height: 3px;
        background: linear-gradient(90deg, #9a9aa0, #b8b8bf, #d6d6dc);
        border-radius: 5px;
        margin-left: 20px;
    }}
    </style>
    <div class="section-header">
        <h200>Bor TÃ¼rleri  SektÃ¶r BazlÄ± Sorgulama</h200>
        <div class="line"></div>
    </div>
    """, unsafe_allow_html=True)
    st.markdown(f"""
    <style>
    .section-header {{
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 0px;
    }}
    .section-header h98 {{
        font-size: 20px;
        font-weight: 1000;
        background: linear-gradient(90deg, #cdcdd4, #89898f, #474747);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin: 0;
        white-space: nowrap;
        letter-spacing: 0px;
        transition: transform 0.3s ease, letter-spacing 0.3s ease, text-shadow 0.3s ease;
        text-shadow: none;
    }}
    .section-header:hover h98 {{
        transform: scale(1.03);
        letter-spacing: 0px;
        text-shadow: 0 0 8px rgba(184, 184, 191, 0.6), 
                     0 0 16px rgba(184, 184, 191, 0.4);
    }}
    </style>
    <div class="section-header">
        <h98>Veri hakkÄ±nda sorunuzu yazÄ±n (Ã¶rn: '2015 yÄ±lÄ±nda Borik Asit Ã¼retimi')</h98>
    </div>
    """, unsafe_allow_html=True)
    soru = st.text_input("")
    if st.button("Sorgula"):
        if soru:
            bulunan_yil = None
            for y in df_tur["Yil"].unique():
                if str(y) in soru:
                    bulunan_yil = y
                    break
        
            bulunan_tur = None
            for t in df_tur["Bor_Turleri"].dropna().unique():
                if str(t).lower() in soru.lower():
                    bulunan_tur = t
                    break
        
            if bulunan_tur and bulunan_yil:
                sonuc = df_tur[
                    (df_tur["Bor_Turleri"] == bulunan_tur) &
                    (df_tur["Yil"] == bulunan_yil)
            ]
                if not sonuc.empty:
                    st.success(f"{bulunan_yil} yÄ±lÄ±nda {bulunan_tur} verileri:")

                # ðŸ“‹ Scroll destekli tablo
                    styled_sonuc = sonuc.to_html(index=False, classes="custom-table")
                    st.markdown('<div style="overflow-x: auto;">' + styled_sonuc + '</div>', unsafe_allow_html=True)

                    st.bar_chart(
                        sonuc[["Uretim_Milyon_Ton", "Ihracat_Miktari_Milyon_Ton"]].T
                )
                else:
                    st.warning("Veri bulunamadÄ±.")
            else:
                st.warning("Soru iÃ§inde bor tÃ¼rÃ¼ ve yÄ±l belirtmelisiniz.")

with tabs[1]:
        st.markdown(f"""
    <style>
    .section-header {{
        display: flex;
        align-items: center;
        margin-bottom: 20px;
    }}
    .section-header h200 {{
        font-size: 32px;
        font-weight: 1000;
        background: linear-gradient(90deg, #474747, #89898f, #cdcdd4);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin: 0;
        white-space: nowrap;
        letter-spacing: 1px;
        transition: transform 0.3s ease, letter-spacing 0.3s ease, text-shadow 0.3s ease;
        text-shadow: none;
    }}
    .section-header:hover h200 {{
        transform: scale(1.03);
        letter-spacing: 2px;
        text-shadow: 0 0 8px rgba(184, 184, 191, 0.6),
                     0 0 16px rgba(184, 184, 191, 0.4);
    }}
    .section-header .line {{
        flex-grow: 1;
        height: 3px;
        background: linear-gradient(90deg, #9a9aa0, #b8b8bf, #d6d6dc);
        border-radius: 5px;
        margin-left: 20px;
    }}
    </style>
    <div class="section-header">
        <h200>DÃ¼nya Ä°hracat HaritasÄ±</h200>
        <div class="line"></div>
    </div>
    """, unsafe_allow_html=True)
        countries = [
    'United States', 'Canada', 'Brazil', 'Argentina', 'Mexico',
    'Germany', 'France', 'United Kingdom', 'Italy', 'Spain',
    'Russia', 'Ukraine', 'Poland', 'Sweden', 'Norway',
    'Finland', 'Denmark', 'Netherlands', 'Belgium', 'Switzerland',
    'India', 'China', 'Japan', 'South Korea', 'Indonesia',
    'Saudi Arabia', 'United Arab Emirates', 'South Africa', 'Egypt', 'Nigeria',
    'Australia', 'New Zealand', 'Thailand', 'Vietnam', 'Malaysia',
    'Colombia', 'Chile', 'Peru', 'Venezuela', 'Ecuador',
    'Iran', 'Iraq', 'Pakistan', 'Bangladesh', 'Philippines',
    'Morocco', 'Algeria', 'Greece', 'Portugal', 'Czechia'
]

# Sahte ihracat deÄŸerleri Ã¼ret (Ã¶rnek amaÃ§lÄ±)
        exports = [random.randint(10, 300) for _ in countries]

# DataFrame oluÅŸtur
        df = pd.DataFrame({
    "Ãœlke": countries,
    "Ä°hracat": exports
})

# ISO A3 kodlarÄ±nÄ± eklemek iÃ§in Ã¼lke adlarÄ±nÄ± kodlara Ã§evireceÄŸiz

        def get_iso_a3(country_name):
            try:
                return pycountry.countries.lookup(country_name).alpha_3
            except LookupError:
                return None  # Bulunamayan Ã¼lkelere None dÃ¶ner

        df["ISO_A3"] = df["Ãœlke"].apply(get_iso_a3)

# None olanlarÄ± filtrele
        df = df.dropna(subset=["ISO_A3"])

# Sahte veri
        values = np.random.randint(10, 100, size=len(countries))

        custom_data = ["Ãœlke", "Ä°hracat"]

        fig = px.choropleth(
    df,
    locations="ISO_A3",
    color="Ä°hracat",
    hover_name="Ãœlke",
    projection="orthographic",
    color_continuous_scale="blues",
    custom_data=custom_data
)

        fig.update_geos(
    showcoastlines=True,
    showland=True,
    projection_type="orthographic",
    landcolor="rgb(30,30,30)",
    oceancolor="#02031a",     # OKYANUSUN RENGÄ° DEÄžÄ°ÅžTÄ°RÄ°LDÄ°
    showocean=True,
    bgcolor="#0d0f16"         # ARKA PLAN RENGÄ°
)

        fig.update_layout(
    paper_bgcolor="#0d0f16",
    height=500,  # sayfadaki harita yÃ¼ksekliÄŸi
    plot_bgcolor="#0d0f16",
    font=dict(color='white'),
    geo=dict(
        showframe=False,
        showcoastlines=True,
    ),
    coloraxis_colorbar=dict(
        title=dict(
            text="DeÄŸer",
            font=dict(color='white', size=14)
        ),
        tickfont=dict(color='white'),
        bgcolor='#02031a'
    )
)
        fig.update_traces(
    hovertemplate="<b>%{customdata[0]}</b><br>Ä°hracat DeÄŸeri: %{customdata[1]} M$<extra></extra>"
)
        st.plotly_chart(fig, use_container_width=True)
# Otomatik yenileme (her 1 saniyede bir)
        st.info("""
**KÃ¼resel Bor Ä°hracat DaÄŸÄ±lÄ±mÄ± HaritasÄ±**

Bu harita, dÃ¼nya genelinde bor ihracatÄ±nÄ±n Ã¼lkelere gÃ¶re daÄŸÄ±lÄ±mÄ±nÄ± gÃ¶rselleÅŸtirmektedir. 
Renk skalasÄ±, daha yÃ¼ksek ihracat deÄŸerlerini koyu mavi tonlarÄ±nda; daha dÃ¼ÅŸÃ¼k deÄŸerleri ise aÃ§Ä±k mavi olarak yansÄ±tÄ±r.

ðŸ”¹ Ã–zellikle **Orta DoÄŸu**, **Asya** ve **Avrupa** bÃ¶lgelerinde dikkat Ã§eken bir yoÄŸunluk gÃ¶zlemlenmektedir.  
ðŸ”¹ **TÃ¼rkiye'nin** merkezde yer almasÄ±, bor sevkiyatÄ±nda stratejik bir konumda olduÄŸunu gÃ¶sterir.  
ðŸ”¹ **GeliÅŸmiÅŸ sanayi Ã¼lkeleri** (Ã¶rneÄŸin Almanya, Ã‡in, GÃ¼ney Kore) yÃ¼ksek ithalat potansiyeli ile Ã¶n plana Ã§Ä±kmaktadÄ±r.  
ðŸ”¹ BazÄ± Afrika ve GÃ¼ney Amerika Ã¼lkelerinde ise dÃ¼ÅŸÃ¼k veya sÄ±fÄ±r sevkiyat dikkati Ã§ekmektedir.

Bu gÃ¶rselleÅŸtirme, bor ihracat stratejilerinin kÃ¼resel Ã¶lÃ§ekte deÄŸerlendirilmesi iÃ§in gÃ¼Ã§lÃ¼ bir iÃ§gÃ¶rÃ¼ saÄŸlar.
""")

        st.markdown("---")